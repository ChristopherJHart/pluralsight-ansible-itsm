---
- name: Remove OSPF network from Boston
  hosts: boston.chrisjhart.net
  gather_facts: false
  tasks:
    - name: Remove OSPF network from Boston
      cisco.ios.ios_config:
        lines:
          - no network 192.168.4.0 0.0.0.255 area 0
        parents: router ospf 1
    - ansible.builtin.pause:
        prompt: "Press 'Enter' to continue with playbook"
- name: Create and schedule ServiceNow change request to implement OSPF changes
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Create ServiceNow change request to implement OSPF changes
      servicenow.itsm.change_request:
        instance:
          host: "{{ servicenow_host }}"
          username: "{{ servicenow_username }}"
          password: "{{ servicenow_password }}"
        state: "new"
        type: "standard"
        requested_by: "ansible"
        short_description: >
          Activate OSPF on Boston's host-facing GigabitEthernet4 interface
        description: >
          To finish provisioning our new Boston branch office, we need to
          activate OSPF on the Boston router's host-facing GigabitEthernet4
          interface using Ansible.
        priority: "moderate"
        risk: "low"
        impact: "low"
        other:
          cmdb_ci: "9426aa4807010110631efc289c1ed0ff"
          implementation_plan: >
            router ospf 1
              network 192.168.4.0 0.0.0.255 area 0
          backout_plan: >
            router ospf 1
              no network 192.168.4.0 0.0.0.255 area 0
          test_plan: >
            show ip ospf database router | include 192.168.4.0
      register: created_cr_results
    - name: Schedule ServiceNow change request to implement OSPF changes
      servicenow.itsm.change_request:
        instance:
          host: "{{ servicenow_host }}"
          username: "{{ servicenow_username }}"
          password: "{{ servicenow_password }}"
        number: "{{ created_cr_results.record.number }}"
        state: "scheduled"
        assignment_group: "Network"
        other:
          start_date: >-
            {{ ansible_date_time.iso8601
            | iso8601_to_servicenow_datetime_format }}
          end_date: >-
            {{ ansible_date_time.iso8601
            | modify_time(modifier='add', hours=1) }}
      register: created_cr_results
    - ansible.builtin.debug:
        msg: >-
          Created and scheduled {{ created_cr_results.record.number }} at
          {{ created_cr_results.record.opened_at }} to implement OSPF changes
          in Boston. Scheduled start date is
          {{ created_cr_results.record.start_date }} and scheduled end date is
          {{ created_cr_results.record.end_date }}.
- name: Fetch ServiceNow change requests created
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Define threshold datetime for scheduled Change Request start date
      ansible.builtin.set_fact:
        change_request_start_date_threshold: >-
          {{ ansible_date_time.iso8601
          | modify_time(modifier='subtract', seconds=30) }}
    - name: >-
        Define playbook execution time, which should be before a scheduled
        Change Request's end date
      ansible.builtin.set_fact:
        playbook_execution_time: >-
          {{ ansible_date_time.iso8601
          | iso8601_to_servicenow_datetime_format }}
    - name: Fetch recent ServiceNow change requests
      servicenow.itsm.change_request_info:
        instance:
          host: "{{ servicenow_host }}"
          username: "{{ servicenow_username }}"
          password: "{{ servicenow_password }}"
        query:
          - state: "= scheduled"
            start_date: ">= {{ change_request_start_date_threshold }}"
            end_date: ">= {{ playbook_execution_time }}"
      register: cr_results
    - ansible.builtin.debug:
        msg: >-
          Found {{ cr_results.records | length }} Change Request(s) matching
          conditions
    - name: End playbook if no Change Requests exist
      ansible.builtin.meta: end_play
      when: cr_results.records | length == 0
    - name: Show data about scheduled Change Requests to be worked by Ansible
      ansible.builtin.debug:
        msg: >-
          Change Request {{ item.number }} opened at {{ item.opened_at }}
          with scheduled start date of {{ item.start_date }} and scheduled
          end date of {{ item.end_date }}
      with_items: "{{ cr_results.records }}"
      loop_control:
        label: "{{ item.number }}"
    - name: Assign Change Request to Ansible and update notes
      servicenow.itsm.change_request:
        instance:
          host: "{{ servicenow_host }}"
          username: "{{ servicenow_username }}"
          password: "{{ servicenow_password }}"
        number: "{{ cr_results.records[0].number }}"
        state: "implement"
        assignment_group: "Network"
        other:
          assigned_to: "ansible"
          work_notes: >-
            Implementing OSPF configuration change based on information in
            Change Request.
    - name: Fetch Configuration item for Router
      servicenow.itsm.configuration_item_info:
        instance:
          host: "{{ servicenow_host }}"
          username: "{{ servicenow_username }}"
          password: "{{ servicenow_password }}"
        sys_class_name: "cmdb_ci_ip_router"
        sys_id: "{{ cr_results.records[0].cmdb_ci }}"
      register: ci_router_results
    - ansible.builtin.set_fact:
        router_to_configure: "{{ ci_router_results.records[0].ip_address }}"
- name: Apply configuration to relevant router
  hosts: routers
  gather_facts: false
  tasks:
    - name: >-
        Apply configuration and test plan to relevant router. Roll back if
        necessary
      block:
        - name: Apply configuration to relevant router
          cisco.ios.ios_config:
            lines: >-
              {{ hostvars['localhost']['created_cr_results']['record']
              ['implementation_plan'] }}
        - name: Invoke test plan on relevant router
          cisco.ios.ios_command:
            commands: >-
              {{ hostvars['localhost']['created_cr_results']['record']
              ['test_plan'] }}
          register: test_output
        - name: Update Change Request with test plan results
          servicenow.itsm.change_request:
            instance:
              host: "{{ servicenow_host }}"
              username: "{{ servicenow_username }}"
              password: "{{ servicenow_password }}"
            number: >-
              {{ hostvars['localhost']['created_cr_results']['record']
              ['number'] }}
            other:
              work_notes: >-
                Test plan output from {{ inventory_hostname }}:


                {{ test_output.stdout[0] }}
        - name: Move Change Request to Review if test plan has output
          servicenow.itsm.change_request:
            instance:
              host: "{{ servicenow_host }}"
              username: "{{ servicenow_username }}"
              password: "{{ servicenow_password }}"
            number: >-
              {{ hostvars['localhost']['created_cr_results']['record']
              ['number'] }}
            state: "review"
            assignment_group: "Network"
            other:
              work_notes: >-
                Configuration applied to {{ inventory_hostname }} successfully.
          when: test_output.stdout[0]
        - name: >-
            Roll back configuration changes and update Change Request if test
            plan does not have output
          block:
            - name: Roll back configuration changes
              cisco.ios.ios_config:
                lines: >-
                  {{ hostvars['localhost']['created_cr_results']['record']
                  ['backout_plan'] }}
            - name: Update Change Request accordingly
              servicenow.itsm.change_request:
                instance:
                  host: "{{ servicenow_host }}"
                  username: "{{ servicenow_username }}"
                  password: "{{ servicenow_password }}"
                number: >-
                  {{ hostvars['localhost']['created_cr_results']['record']
                  ['number'] }}
                state: "review"
                assignment_group: "Network"
                other:
                  work_notes: >-
                    Test plan output was empty, which indicated that
                    configuration was not applied successfully. Configuration
                    changes on {{ inventory_hostname }} were rolled back
                    accordingly.
          when: not test_output.stdout[0]
      when: hostvars["localhost"]["router_to_configure"] == inventory_hostname
